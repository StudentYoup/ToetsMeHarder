@using Business.PianoComponent;
@using Business.FallingBlocks;
<div class="menu">
    <button class="KeyModeButton" @onclick="pianoManager.ChangeKeyModus"><b>Keymodus: <i>@pianoManager._keyModus</i></b></button>
    <button class="midi"><b>MIDI: <i>
        @{
            if(pianoManager.midiName != null)
            {
                <text>VERBONDEN (@pianoManager.midiName)</text>
            }
            else
            {
                <text>VERBINDING VERBROKEN</text>
            }
        }
    </i></b></button>
</div>
<ul class="set">
    @{
        foreach ((KeyValue key, double frequency) in pianoManager._noteFrequencies)
        {
            <li id="@key" @onpointerdown="() => pianoManager.PlayNote(key)" @onpointerup="() => pianoManager.StopNote(key)" @onpointerleave="() => pianoManager.StopNote(key)" class="@CreateCSSClass(key.ToString())">
				
                <b>
                    @if (pianoManager._keyModus == KeyModus.Note)
                    {
                        <text>@pianoManager.GetKeyName(key).ToUpper()</text>
                    }
                    else if (pianoManager._keyModus == KeyModus.Key)
                    {
                        <text>@pianoManager._pianoKeys.FirstOrDefault(x => x.Value == key).Key.ToUpper()</text>
                    }
                </b>
            </li>
        }
    }
</ul>


<!--Click Simulation-->
<script>
    window.setKeyActive = (id) => {
        const el = document.getElementById(id);
        if (el) {
            el.classList.add("manual-active");
        }
    };

    window.setKeyInactive = (id) => {
        const el = document.getElementById(id);
        if (el) {
            el.classList.remove("manual-active");
        }
    };
</script>
